#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <locale.h>

#define SIZE 12

typedef double (*TFun)(double);

void print_func();

double func1(double x);
double func2(double x);
double func3(double x);

int add_ffile(int chose);

double* calculate(TFun prtf, double* x, int n);

void main()
{
	setlocale(LC_ALL, "rus");
	int k = 1, menu, chose_func;
	double start, end, calc_func, step, cnt, near[15];
	double* print;
	print = (double*)malloc(15 * sizeof(double));
	while (k > 0)
	{
		printf("Выберите необходимое действие:\n1 - Вычислить значение\n2 - Табулировать\n3 - Выполнить операцию\n4 - Вывести 15 значений близких к 0 фунции\n5 - Выход из программы\n");
		scanf("%d", &menu);
		switch (menu)
		{
		case 1:
			print_func();
			printf("Выберите функцию:\n1 - Y(x)\n2 - V(x)\n3 - S(x)\n");
			scanf("%d", &chose_func);
			printf("Введите значение неизвестного члена: ");
			scanf("%lf", &calc_func);
			if (chose_func == 1) printf("Y(x) = %lf\n\n", func1(calc_func));
			if (chose_func == 2) printf("V(x) = %lf\n\n", func2(calc_func));
			if (chose_func == 3) printf("S(x) = %lf\n\n", func3(calc_func));
			break;
		case 2:
			print_func();
			printf("Выберите функцию:\n1 - Y(x)\n2 - V(x)\n3 - S(x)\n");
			scanf("%d", &chose_func);
			printf("Введите промежуток(нач:кон):\n");
			getchar();
			scanf("%lf:%lf", &start, &end);
			printf("Введите шаг:\n");
			scanf("%lf", &step);
			printf("__________________\n");
			cnt = start;
			if (chose_func == 1)
			{
				for (int i = 0; i <= (end - start) / step; i++)
				{
					printf("| x = %9lf | y = %9lf |\n", cnt, func1(cnt));
					cnt += step;
				}
			}
			if (chose_func == 2)
			{
				for (int i = 0; i <= (end - start) / step; i++)
				{
					printf("| x = %9lf | y = %9lf |\n", cnt, func2(cnt));
					cnt += step;
				}
			}
			if (chose_func == 3)
			{
				for (int i = 0; i <= (end - start) / step; i++)
				{
					printf("| x = %9lf | y = %9lf |\n", cnt, func3(cnt));
					cnt += step;
				}
			}
			break;
		case 3:
			print_func();
			printf("Выберите функцию:\n1 - Y(x)\n2 - V(x)\n3 - S(x)\n");
			scanf("%d", &chose_func);
			if (chose_func == 1) add_ffile(chose_func);
			if (chose_func == 2) add_ffile(chose_func);
			if (chose_func == 3) add_ffile(chose_func);
			break;
		case 4:
			print_func();
			printf("Выберите функцию:\n1 - Y(x)\n2 - V(x)\n3 - S(x)\n");
			scanf("%d", &chose_func);
			if (chose_func == 1)
			{
				print = calculate(func1, near, 15);
				for (int i = 0; i < 15; i++)
					printf("%lf", print[i]);
			}
			if (chose_func == 2) calculate(func2, near, 15);
			if (chose_func == 3) calculate(func3, near, 15);
			for (int i = 0; i < 15; i++) printf("%a[%d] = %lf", i, near[i]);
			break;
		case 5:
			k = 0;
			break;
		}
	}
}

void print_func()
{
	printf("Y(x) = ln|sqrt(x^3)|, при х > 0\n\n");
	printf("       |sqrt(tg(x^2 - 1), при х > 1\n");
	printf("V(x) = |-2x,              при 0 <= x <= 1\n");
	printf("       |e^cos(x),         при х < 0\n\n");
	printf("       x - 1    1   (x - 1)^3  1   (x - 1)^5  1   (x - 1)^7\n");
	printf("S(x) = ------ + - * (-----)  + - * (-----)  + - * (-----)\n");
	printf("       x + 1    3   (x + 1)    5   (x + 1)    7   (x + 1)\n");
}

double func1(double x)
{
	double res = 0;
	if (x > 0) res = log(fabs(sqrt(pow(x, 3))));
	return res;
}

double func2(double x)
{
	double res = 0;	
	if (x > 1) res = sqrt(tan(x * x - 1));
	if (0 <= x <= 1) res = -2 * x;
	else res = exp(cos(x));
}

double func3(double x)
{
	double res = 0;
	res = (x - 1) / (x + 1) + (1 / 3.) * pow((x - 1) / (x + 1), 3) + (1 / 5.) * pow((x - 1) / (x + 1), 5) + (1 / 7.) * pow((x - 1) / (x + 1), 7);
	return res;
}

int add_ffile(int chose)
{
	float d;
	FILE* read = fopen("dat.txt", "r");

	printf("Вычисленные значения для неизвестных из \"dat.txt\"\n");
	while (!feof(read))
	{
		fscanf(read, "%f", &d);
		if (chose == 1) printf("%lf\n", func1(d));
		if (chose == 2) printf("%lf\n", func2(d));
		if (chose == 3) printf("%lf\n", func3(d));
	}
	fclose(read);
	return 1;
}

double* calculate(TFun prtf, double* x, int n)
{
	int start = -50, end = 50, k = 0;
	double step = 0.5;

	double* new_mass = (double*)malloc(200 * sizeof(double));
	for (int i = start; i < end; i += step)
	{
		if ((prtf(i) >= -0.5) && (prtf(i) <= 0.5))
			new_mass[k++] = prtf(i);
	}
	return new_mass;
}
